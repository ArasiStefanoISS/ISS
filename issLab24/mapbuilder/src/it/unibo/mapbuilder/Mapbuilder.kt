/* Generated by AN DISI Unibo */ 
package it.unibo.mapbuilder

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import main.resources.robotvirtual.VrobotLLMoves24
import main.resources.map.RoomMap
import main.resources.map.RobotDir
import main.resources.map.RobotDir.Direction

class Mapbuilder ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val vr = VrobotLLMoves24.create("localhost",myself)
		 var N  = 0 
			   var RobotPosX = 0  
			   var RobotPosY = 0
			   var goingDown = true
			   var goingLeft = false
			   lateinit var map : RoomMap
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS")
						 vr.halt()   
						 RobotDir.setDir(Direction.DOWN)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="useMap", cond=doswitch() )
				}	 
				state("useMap") { //this:State
					action { //it:State
						  map = RoomMap.loadRoomMap("map")  
						  map.clear()     
						  map.setRobot(RobotPosX,RobotPosY)  
						  map.showMap()   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="boundary", cond=doswitch() )
				}	 
				state("boundary") { //this:State
					action { //it:State
						delay(100) 
						 var RSTEP = vr.step(370)  
						CommUtils.outblue("$name | boundary ($RobotPosX,$RobotPosY)")
						if(  RSTEP  
						 ){if(  RobotDir.goingDown()  
						 ){ map.setFree(RobotPosX,RobotPosY)  
						 RobotPosX++  
						 map.setRobot(RobotPosX,RobotPosY)  
						 map.showMap()   
						}
						if(  RobotDir.goingUp()  
						 ){ map.setFree(RobotPosX,RobotPosY)  
						 RobotPosX--  
						 map.setRobot(RobotPosX,RobotPosY)  
						 map.showMap()   
						}
						if(  RobotDir.goingLeft()  
						 ){ map.setFree(RobotPosX,RobotPosY)  
						 RobotPosY--  
						 map.setRobot(RobotPosX,RobotPosY)  
						 map.showMap()   
						}
						if(  RobotDir.goingRight()  
						 ){ map.setFree(RobotPosX,RobotPosY)  
						 RobotPosY++  
						 map.setRobot(RobotPosX,RobotPosY)  
						 map.showMap()   
						}
						forward("stepdone", "stepdone(1)" ,name ) 
						}
						else
						 {forward("stepfailed", "stepfailed(1)" ,name ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="boundary",cond=whenDispatch("stepdone"))
					transition(edgeName="t01",targetState="turnAndgo",cond=whenDispatch("stepfailed"))
				}	 
				state("turnAndgo") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 N = N + 1  
						 vr.turnLeft()  
						 map.setFree(RobotPosX,RobotPosY)  
						if(  RobotDir.goingDown()  
						 ){ RobotPosX++   
						}
						if(  RobotDir.goingRight()  
						 ){ RobotPosY++  
						}
						if(  RobotDir.goingUp()   && RobotPosX > 0   
						 ){ RobotPosX--  
						}
						if(  RobotDir.goingLeft() && RobotPosY > 0   
						 ){ RobotPosY--  
						}
						 map.setRobot(RobotPosX,RobotPosY)  
						if(  N==1  
						 ){ RobotDir.setDir(RobotDir.Direction.RIGHT )  
						}
						if(  N==2  
						 ){ RobotDir.setDir(RobotDir.Direction.UP)      
						}
						if(  N==3  
						 ){ RobotDir.setDir(RobotDir.Direction.LEFT)    
						}
						 map.showMap()   
						CommUtils.outcyan("$name | N=$N")
						if(  N == 4  
						 ){ RobotDir.setDir(RobotDir.Direction.DOWN)  
						 map.showMap()              
						 val MS  = map.toString()   
						 map.saveRoomMap("mapBorderJava", MS )  
						 val MP  = map.toProlog()   
						 map.saveRoomMapProlog("mapBorderProlog", MP )  
						delay(1000) 
						 System.exit(0)  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="boundary", cond=doswitch() )
				}	 
			}
		}
} 
